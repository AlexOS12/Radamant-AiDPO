// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace RadamantAPI.Models
{
    public partial class RadamantContext : DbContext
    {
        public RadamantContext()
        {
        }

        public RadamantContext(DbContextOptions<RadamantContext> options)
            : base(options)
        {
        }

        public virtual DbSet<CheckPoint> CheckPoints { get; set; }
        public virtual DbSet<CheckPointStaff> CheckPointStaffs { get; set; }
        public virtual DbSet<LogStatus> LogStatuses { get; set; }
        public virtual DbSet<Person> Persons { get; set; }
        public virtual DbSet<SecurityMessage> SecurityMessages { get; set; }
        public virtual DbSet<Staff> Staff { get; set; }
        public virtual DbSet<Wicket> Wickets { get; set; }
        public virtual DbSet<WicketLog> WicketLogs { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=\"95.165.152.146, 1433\";Initial Catalog=Radamant;Persist Security Info=True;User ID=RadamantUser;Password=12345");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CheckPointStaff>(entity =>
            {
                entity.HasOne(d => d.CheckPoint)
                    .WithMany(p => p.CheckPointStaffs)
                    .HasForeignKey(d => d.CheckPointId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CheckPointStaff_CheckPoints");

                entity.HasOne(d => d.Staff)
                    .WithMany(p => p.CheckPointStaffs)
                    .HasForeignKey(d => d.StaffId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CheckPointStaff_Staff");
            });

            modelBuilder.Entity<Person>(entity =>
            {
                entity.Property(e => e.KeyGuid).IsFixedLength();

                entity.Property(e => e.Passport).IsFixedLength();
            });

            modelBuilder.Entity<SecurityMessage>(entity =>
            {
                entity.HasOne(d => d.CheckPoint)
                    .WithMany(p => p.SecurityMessages)
                    .HasForeignKey(d => d.CheckPointId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SecurityMessages_CheckPoints");
            });

            modelBuilder.Entity<Staff>(entity =>
            {
                entity.Property(e => e.PassHash).IsFixedLength();
            });

            modelBuilder.Entity<Wicket>(entity =>
            {
                entity.HasOne(d => d.CheckPoint)
                    .WithMany(p => p.Wickets)
                    .HasForeignKey(d => d.CheckPointId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Wickets_CheckPoints");
            });

            modelBuilder.Entity<WicketLog>(entity =>
            {
                entity.HasOne(d => d.Person)
                    .WithMany(p => p.WicketLogs)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WicketLogs_Persons");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.WicketLogs)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_WicketLogs_LogStatuses");

                entity.HasOne(d => d.Wicket)
                    .WithMany(p => p.WicketLogs)
                    .HasForeignKey(d => d.WicketId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WicketLogs_Wickets");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}